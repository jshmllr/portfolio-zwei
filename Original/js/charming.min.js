/**
 * charming.js - A tiny JavaScript utility for splitting text nodes into individual elements
 * 
 * This library works by:
 * 1. Using an IIFE (Immediately Invoked Function Expression) to avoid polluting global scope
 * 2. Exposing itself as either a browser global or a CommonJS module
 * 3. Taking an element and options as parameters
 * 4. Recursively traversing all child nodes of the element
 * 5. When it finds text nodes, it splits each character into its own element (default: span)
 * 6. Each character gets a class (default: "char1", "char2", etc.)
 * 7. The original text node is removed after its characters are inserted
 * 
 * This enables fine-grained animation and styling of individual characters.
 */
!function(e){"undefined"==typeof module?this.charming=e:module.exports=e}(function(e,n){"use strict";n=n||{};var t=n.tagName||"span",o=null!=n.classPrefix?n.classPrefix:"char",r=1,a=function(e){for(var n=e.parentNode,a=e.nodeValue,c=a.length,l=-1;++l<c;){var d=document.createElement(t);o&&(d.className=o+r,r++),d.appendChild(document.createTextNode(a[l])),n.insertBefore(d,e)}n.removeChild(e)};return function c(e){for(var n=[].slice.call(e.childNodes),t=n.length,o=-1;++o<t;)c(n[o]);e.nodeType===Node.TEXT_NODE&&a(e)}(e),e});